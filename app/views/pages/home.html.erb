<canvas id="animation-canvas" width="1920" height="1080" style="display: block; background: white;"></canvas>

<div id="main-content" style="display:none;">

  <nav class="navbar" style="display: flex; align-items: center; justify-content: space-between; padding: 0 10px; background-color: #7192A2; height: 70px; font-family: 'Copperplate Gothic Light'; font-weight: bold;">
    <!-- Left group -->
    <ul class="nav-text" style="font-weight: bold; font-size: 1.6rem; color:#ffffff; line-height: 70px;">
      <li style="color: #ffffff; font-weight: bold; line-height: 70px;">User</li>
    </ul>

    <!-- Right group -->
    <ul class="nav-text" style="display: flex; list-style: none; margin: 0; padding: 0; gap: 20px; align-items: center;">
      <li id="digital-time" style="font-weight: bold; font-size: 1.6rem; color:#ffffff; line-height: 70px;"></li>
      <li id="date-display" style="font-weight: bold; font-size: 1.6rem; color:#ffffff; line-height: 70px;"></li>
      <li>
        <%= image_tag("battery.png", alt: "Battery", style: "width: 40px; height: 40px; object-fit: contain;") %>
      </li>
    </ul>
  </nav>

<header class="site-header" style="padding-top: 30px; font-family: 'Copperplate Gothic Light', sans-serif;">
  <%= link_to about_path, style: "text-decoration: none; color: inherit; display: block;" do %>
    <section class="corner-hover" style="display: flex; align-items: center; gap: 0; max-width: 1150px; margin: 0 auto; padding: 0; border: 2px solid black; background: linear-gradient(to bottom, white 30%, #D3D3D3 100%); height: 320px;">
      
      <!-- Left (big ombre box with icon) -->
      <div style="flex: 1; display: flex; justify-content: center; align-items: center;">
        <%= image_tag("Headshot.JPG", alt: "Headshot", style: "width: 310px; height: 310px; object-fit: cover; border: 1px solid black; display: block; margin-left: 4px;") %>
      </div>

      <!-- Right (smaller box inside, shifted left) -->
      <div style="width: 831px; height: 310px; border: 1px solid black; background-color: #f0f0f0; display: flex; justify-content: center; align-items: center; margin-right: 4px;">
        <span class="corner bottom-left"></span>
        <span class="corner bottom-right"></span>
        <div class="intro-text" style="font-family: 'Orbitron', sans-serif;">
          I'm <span class="highlight-name">Drew Smith.</span> Take a look around. I value simplicity, thoughtful design, and writing code thatâ€™s easy to maintain.
        </div>
      </div>

    </section>
  <% end %>
</header>

<section class="intro-text" style="display: flex; justify-content: center; align-items: center; gap: 5px; max-width: 1154px; height: 320px; margin: 0 auto; padding: 0; background-color: #f0f0f0; font-family: 'Copperplate Gothic Light';">

  <!-- Projects -->
  <%= link_to projects_path, class: "corner-hover", style: "flex: 1; border: 2px solid black; background: linear-gradient(to bottom, white 30%, #D3D3D3 100%); display: flex; justify-content: center; align-items: center; height: 100%; text-decoration: none; color: inherit; position: relative;" do %>
    <span class="intro-text" style="font-family: 'Orbitron', sans-serif; font-size: 4rem; margin-bottom: 50px;">
      PROJECTS
    </span>
  <% end %>

  <!-- Resume -->
  <div class="corner-hover" style="font-family: 'Orbitron', sans-serif; flex: 1; border: 2px solid black; 
      background: linear-gradient(to bottom, white 30%, #D3D3D3 100%); 
      display: flex; justify-content: center; align-items: center; height: 100%; position: relative; flex-direction: column;">

    <%= link_to "/Andrew-Resume.pdf", target: "_blank", style: "display: flex; flex-direction: column; justify-content: center; align-items: center; text-decoration: none; color: inherit;" do %>
      
    <!-- Text in a white box -->
    <div style="background-color: white; padding: 10px 20px; margin-bottom: 150px; font-weight: bold; font-size: 2.5rem; text-align: center; border: 1px solid black;">
      DS Download Resume
    </div>


      <!-- Paper icon below text -->
      <i class="fa-regular fa-file" style="font-size: 100px; margin-top: -80px"></i>
    <% end %>

    <!-- Bottom corners for corner-hover -->
    <span class="corner bottom-left"></span>
    <span class="corner bottom-right"></span>

    <!-- Download button -->
    <div style="position: absolute; bottom: 10px; right: 10px;">
      <%= link_to "/Andrew-Resume.pdf", download: "Andrew-Resume.pdf", style: "height: 40px; width: 40px; padding: 0; border-radius: 0; text-decoration: none; display: flex; justify-content: center; align-items: center;" do %>
        <i class="fa-solid fa-download" style="color: black;"></i>
      <% end %>
    </div>
  </div>
</section>



<header class="site-header" style="padding-top: 5px; font-family: 'Copperplate Gothic Light', sans-serif;">
  <%= link_to contact_path, style: "text-decoration: none; color: inherit; display: block;" do %>
    <section class="corner-hover" style="display: flex; align-items: center; gap: 0; max-width: 1150px; margin: 0 auto; padding: 0; border: 2px solid black; background: linear-gradient(to bottom, white 30%, #D3D3D3 100%); height: 320px;">
      
      <!-- Left (big ombre box with icon) -->
      <div style="flex: 1; display: flex; justify-content: center; align-items: center;">
        <i class="fa-regular fa-id-card" style="font-size: 150px;"></i>
      </div>

      <!-- Right (smaller box inside, shifted left) -->
      <div style="width: 834px; height: 310px; border: 1px solid black; background-color: #f0f0f0; display: flex; justify-content: center; align-items: center; margin-right: 4px;">
        <span></span>
        <div class="intro-text" style="font-family: 'Orbitron', sans-serif; font-size: 3rem;">
          Start Contacting Me
        </div>
      </div>

    </section>
  <% end %>
</header>

  <div class="bottom-icons">
    <i class="fa-solid fa-sun"></i>
    <i class="fa-solid fa-clock"></i>
  </div>

  <footer>
    <p>&copy; <%= Time.current.year %> Andrew Smith. All rights reserved.</p>
  </footer>

</div>

<style>
  .container {

    font-family: "Copperplate Gothic Light";
  }

  body, html {
    height: 100%;
  }

  body {
    /* Light gray background with grid lines */
    background-color: #f0f0f0;
    background-image:
      linear-gradient(to right, #ccc 1px, transparent 1px),
      linear-gradient(to bottom, #ccc 1px, transparent 1px);
    background-size: 280px 280px; /* size of each grid cell */
    background-repeat: repeat;
  }

  .corner-hover {
    position: relative;
  }

  /* All corner pieces share these styles */
  .corner-hover::before,
  .corner-hover::after,
  .corner-hover span::before,
  .corner-hover span::after {
    content: "";
    position: absolute;
    width: 50px; /* length of L arms */
    height: 50px;
    opacity: 0;
    transition: opacity 0.2s ease;
    border-color: rgba(65,97,121,255);
    border-style: solid;
  }

  /* Top-left */
  .corner-hover::before {
    top: 0;
    left: 0;
    border-width: 4px 0 0 4px;
  }

  /* Top-right */
  .corner-hover::after {
    top: 0;
    right: 0;
    border-width: 4px 4px 0 0;
  }

  /* Bottom-left */
  .corner-hover span::before {
    bottom: 0;
    left: 0;
    border-width: 0 0 4px 4px;
  }

  /* Bottom-right */
  .corner-hover span::after {
    bottom: 0;
    right: 0;
    border-width: 0 4px 4px 0;
  }

  /* Hover makes all corners visible */
  .corner-hover:hover::before,
  .corner-hover:hover::after,
  .corner-hover:hover span::before,
  .corner-hover:hover span::after {
    opacity: 1;
  }

  .site-header {
    text-align: center;
    padding: 5px;
    padding-top: 40px;
  }

  .navbar ul {
    display: flex;
    justify-content: center;
    list-style: none;
    gap: 1.5rem;
    padding: 0;
    color: #000000;
    font-family: 'Orbitron', sans-serif;
  }
  
  .navbar a {
    padding: 0.5rem;
    margin-top: 0.5rem;
    font-size: 1.5rem;
    font-weight: 800;
    text-decoration: none;
    color: #ffffff;
    font-family: 'Orbitron', sans-serif;
  }

  section {
    margin-top: 3rem;
  }

  footer {
    text-align: center;
    margin-top: 4rem;
    padding-top: 1rem;
    border-top: 1px solid #ccc;
    font-size: 0.9rem;
    color: #666;
  }

  .download-icon {
    width: 40px;
    height: 40px;
    display: flex;
    justify-content: center;
    align-items: center;
    background-color: black;
    color: white;
    border-radius: 50%;
  }

  .intro-text {
  
  margin-top: 0rem;
  font-size: 1rem;
  font-weight: 800;
  font-family: 'Copperplate Gothic Light'
  opacity: 0;
  padding: 5px;
  
}

@media (min-width: 1024px) {
  .intro-text {
    font-size: 2rem;
    margin-top: 1.5rem;
  }
}

.highlight-name {
  color: red; /* Red */
}

.bottom-icons {
  position: relative;      
  bottom: -50px;        
  left: 0;
  right: 0;
  display: flex;
  justify-content: center;
  gap: 1200px;
  padding: 0 20px;     
  align-items: center;
  z-index: 100;      
}

.bottom-icons i {
  font-size: 50px;
  color: gray;          
}

.bottom-icons i.fa-sun {
  color: #FFD700;
}

.bottom-icons i.fa-clock {
  color: gray;
}

/* Fade in/up */
@keyframes fadeInUp {
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

#loading-screen {
  transition: opacity 1s ease;
  opacity: 1;
}

#loading-screen.fade-out {
  opacity: 0;
}

</style>

<audio id="intro-sound" preload="auto">
  <source src="<%= asset_path('nintendo_ds_intro.mp3') %>" type="audio/mpeg">
</audio>

<script>
const canvas = document.getElementById('animation-canvas');
const ctx = canvas.getContext('2d');

let topRectY;
let bottomRectY;

let collide = false;

let fadeControl = 255;
const fadeSpeed = 30;
let rectStrokeWeight = 7;

let rectWidth = 0;
let rectHeight = 0;
const maxW = 120;
const maxH = 100;
const growSpeed = 30;

const topRectEndY = 348;
const bottomRectEndY = 410;

// Small Rect Explosion
const smallRects = [
  {x: 0.5, y: -0.5, delay: 30},
  {x: 0, y: -1, delay: 60},
  {x: -1, y: 0.6, delay: 90},
  {x: 0, y: 1, delay: 120},
  {x: -1, y: -1, delay: 150} 
];

const maxSlide = 500;
const slideSpeed = 0.5;
const smallRectW = 50;
const smallRectH = 80;
const baseOffset = 200;

const targetDuration = 180; // frames (3 seconds at 60 FPS)
const targetSpeed = maxSlide / targetDuration;

let slideAmounts = smallRects.map(() => 0);
let frameCountSinceCollision = 0;
let slideAmount = 0;

// Helper: draw rounded rectangle
function roundRect(ctx, x, y, w, h, r) {
  ctx.beginPath();
  ctx.moveTo(x + r, y);
  ctx.lineTo(x + w - r, y);
  ctx.quadraticCurveTo(x + w, y, x + w, y + r);
  ctx.lineTo(x + w, y + h - r);
  ctx.quadraticCurveTo(x + w, y + h, x + w - r, y + h);
  ctx.lineTo(x + r, y + h);
  ctx.quadraticCurveTo(x, y + h, x, y + h - r);
  ctx.lineTo(x, y + r);
  ctx.quadraticCurveTo(x, y, x + r, y);
  ctx.closePath();
}

// Initialize positions for rects in logo
function setup() {
  topRectY = topRectEndY - 150;
  bottomRectY = bottomRectEndY + 150;
}

// Main animation loop
function draw() {
  // Clear canvas
  ctx.clearRect(0, 0, canvas.width, canvas.height);

  // Background white
  ctx.fillStyle = 'white';
  ctx.fillRect(0, 0, canvas.width, canvas.height);

  // Text "DREW SMITH"
  ctx.font = '75px Arial';
  ctx.fillStyle = 'black';
  ctx.lineWidth = 0.2;
  ctx.strokeStyle = 'black';
  ctx.fillText('DREW SMITH', 300, 400);

  // Text "DS"
  ctx.font = '160px Arial';
  ctx.fillText('DS', 880, 460);

  // Slide topRectY down
  if (topRectY < topRectEndY) {
    topRectY += 7;
    if (topRectY > topRectEndY) topRectY = topRectEndY;
  }

  // Slide bottomRectY up
  if (bottomRectY > bottomRectEndY) {
    bottomRectY -= 7;
    if (bottomRectY < bottomRectEndY) bottomRectY = bottomRectEndY;
  }

  // Collision check
  if (topRectY === topRectEndY && bottomRectY === bottomRectEndY) {
    collide = true;
    frameCountSinceCollision++;
  } else {
    collide = false;
    frameCountSinceCollision = 0;
  }
 
  // Draw top rect - black
  ctx.fillStyle = 'white';
  ctx.lineWidth = 7;
  ctx.strokeStyle = 'black';
  roundRect(ctx, 800, topRectY, 60, 50, 9);
  ctx.fill();
  ctx.stroke();

  // Draw bottom rect - grey
  ctx.fillStyle = 'transparent';
  ctx.strokeStyle = 'rgba(150,150,150,1)';
  ctx.lineWidth = 7;
  roundRect(ctx, 800, bottomRectY, 60, 50, 9);
  ctx.stroke();

  const centerX = 800 + 30; // 60/2
  const topCenterY = topRectEndY - 2.5; // 5/2
  const bottomCenterY = bottomRectEndY + 45; // 90/2

  if (collide) {
    if (rectWidth < maxW) rectWidth += growSpeed;
    if (rectHeight < maxH) rectHeight += growSpeed;

    // Map rectStrokeWeight from 7 to 10 linearly
    rectStrokeWeight = 7 + (rectWidth / maxW) * 3;

    if (rectWidth >= maxW && rectHeight >= maxH) {
      fadeControl -= fadeSpeed;
      if (fadeControl < 0) fadeControl = 0;
    }

    ctx.lineWidth = rectStrokeWeight;
    ctx.strokeStyle = `rgba(150, 150, 150, ${fadeControl / 255})`;
    ctx.fillStyle = 'transparent';

    roundRect(ctx, centerX - rectWidth / 2, topCenterY - rectHeight / 2, rectWidth, rectHeight, 9);
    ctx.stroke();

    roundRect(ctx, centerX - rectWidth / 2, bottomCenterY - rectHeight / 2, rectWidth, rectHeight, 9);
    ctx.stroke();

  } else {
    rectWidth = 0;
    rectHeight = 0;
    rectStrokeWeight = 7;
    fadeControl = 255;
  }

  if (collide) {
    if (slideAmount < maxSlide) slideAmount += slideSpeed;

    ctx.lineWidth = 7;
    ctx.strokeStyle = `rgba(150, 150, 150, ${fadeControl / 255})`;
    ctx.fillStyle = 'transparent';

    const centerY = (topRectEndY + bottomRectEndY + 50) / 2;

    smallRects.forEach(({x, y, delay}, i) => {
      if (frameCountSinceCollision > delay) {
    if (slideAmounts[i] < maxSlide) {
      // progress 0 â†’ 1
      let progress = slideAmounts[i] / maxSlide;

      // Ease-out factor: starts fast, slows at end
      let easedSpeed = (1 - progress) * 3; // multiply by 3 for visibility

      slideAmounts[i] += slideSpeed * easedSpeed; 

      if (slideAmounts[i] > maxSlide) slideAmounts[i] = maxSlide;
    }
    }

      const posX = centerX + (baseOffset + slideAmounts[i]) * x;
      const posY = centerY + (baseOffset + slideAmounts[i]) * y;

      roundRect(ctx, posX, posY, smallRectW, smallRectH, 5);
      ctx.stroke();
    });

  } else {
    slideAmount = 0;
    slideAmounts = smallRects.map(() => 0);
  }

  requestAnimationFrame(draw);

}

window.addEventListener('load', () => {
  const introSound = document.getElementById('intro-sound');
  if (introSound) {
    introSound.play().catch(err => {
      console.warn('Autoplay blocked:', err);
      // You can optionally silently ignore or show a message here
    });
  }
});


// Start everything
setup();
draw();

// Show main content after ~3 seconds
setTimeout(() => {
  const canvasEl = document.getElementById('animation-canvas');
  canvasEl.classList.add('fade-out');
  
  setTimeout(() => {
    canvasEl.style.display = 'none';
    document.getElementById('main-content').style.display = 'block';
  }, 1000); 
}, 1000);

  function updateDigitalTime() {
    const now = new Date();
    const hours = String(now.getHours()).padStart(2, '0');
    const minutes = String(now.getMinutes()).padStart(2, '0');
    document.getElementById('digital-time').textContent = `${hours}:${minutes}`;
  }
  setInterval(updateDigitalTime, 1000);
  updateDigitalTime();

    function updateDate() {
    const now = new Date();
    const month = String(now.getMonth() + 1).padStart(2, '0');
    const day = String(now.getDate()).padStart(2, '0');
    document.getElementById('date-display').textContent = `${month}/${day}`;
  }

  // Run once on load
  updateDate();

</script>